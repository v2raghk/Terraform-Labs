Lab 05: Create Storage Container and Blob

      In this lab, we will see how to split main.tf file to multiple files to store the code for simplicity.
      I am using the following TF files and in next labs, we will use the code in these specific files.
      
      A clean and modular directory structure for Terraform (.tf) files is crucial for managing infrastructure at scale. 
      Below is a recommended directory layout, suitable for medium to large projects, following best practices:
  
      Providers.tf    # Store the details of Azure Provider
      Backend.tf      # Store the details of remote backend created in Azure
      Variables.tf    # Store the details of variables
      rg.tf           # Store the details about resource group
      storage_acc.tf  # Contain storage account details
      vnet.tf         # Contain virtual network details

We will split main.tf into these files:

Folder Structure

tf-azure-project/
├── backend.tf
├── providers.tf
├── rg.tf
└── store.tf

Providers.tf =>

terraform {
  required_providers {
    azurerm = {
      source = "hashicorp/azurerm"
      version = "~>4.36.0"
    }
  }
}

provider "azurerm" {
  # Configuration options
  features { }
}
 
Backend.tf =>

terraform {
    backend "azurerm" {
    resource_group_name   = "rg-remotebackend"
    storage_account_name  = "tfstateprod12343" 
    container_name        = "tfstate"
    key                   = "terraform.tfstate"
  }
}
 
Rg.tf =>

resource "azurerm_resource_group" "rg" {
  name     = "rg-prod"
  location = "UK West"
}
 
Store.tf => 

resource "azurerm_storage_account" "azstore" {
name = "prodazstore101"
resource_group_name = azurerm_resource_group.rg.name
location = azurerm_resource_group.rg.location # implicit dependencies
account_tier = "Standard"
account_replication_type = "LRS"
tags = {
    environment = "staging"
}
}
 
Run terraform init
RUn terraform plan
Run terraform apply

It wont make any changes as we haven’t modified any resource.
